#!/bin/bash
# NGINX Load Balancer Initialization Script

# Set up logging
exec > >(tee /var/log/nginx-lb-setup.log) 2>&1
echo "Starting NGINX load balancer installation at $(date)"

# Update system
apt-get update
apt-get upgrade -y

# Install NGINX and SSL tools
apt-get install -y nginx certbot python3-certbot-nginx

# Create SSL certificate directory if HTTPS is enabled
%{ if enable_https }
mkdir -p /etc/nginx/ssl
%{ if ssl_certificate != "" && ssl_certificate_key != "" }
# Write SSL certificate and key
cat <<EOF > /etc/nginx/ssl/certificate.crt
${ssl_certificate}
EOF

cat <<EOF > /etc/nginx/ssl/private.key
${ssl_certificate_key}
EOF

chmod 400 /etc/nginx/ssl/private.key
%{ endif }
%{ endif }

# Generate NGINX configuration
cat <<EOF > /etc/nginx/nginx.conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Include virtual host configurations
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Create target group configurations
%{ for target_group_name, target_group in target_groups }
cat <<EOF > /etc/nginx/conf.d/${target_group_name}.conf
%{ if enable_http }
server {
    listen 80;
%{ if length(domain_names) > 0 }
    server_name ${join(" ", domain_names)};
%{ endif }

    location / {
        proxy_pass http://backend_${target_group_name};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

%{ if target_group.health_check != null }
    location ${target_group.health_check.path} {
        proxy_pass http://backend_${target_group_name}${target_group.health_check.path};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        access_log off;
        add_header Content-Type text/plain;
    }
%{ endif }
}
%{ endif }

%{ if enable_https }
server {
    listen 443 ssl;
%{ if length(domain_names) > 0 }
    server_name ${join(" ", domain_names)};
%{ endif }

%{ if ssl_certificate != "" && ssl_certificate_key != "" }
    ssl_certificate /etc/nginx/ssl/certificate.crt;
    ssl_certificate_key /etc/nginx/ssl/private.key;
%{ else }
    # Self-signed certificate for testing
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
%{ endif }

    location / {
        proxy_pass http://backend_${target_group_name};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

%{ if target_group.health_check != null }
    location ${target_group.health_check.path} {
        proxy_pass http://backend_${target_group_name}${target_group.health_check.path};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        access_log off;
        add_header Content-Type text/plain;
    }
%{ endif }
}
%{ endif }

# Define upstream servers
upstream backend_${target_group_name} {
%{ if length(target_group.targets) == 0 }
    server 127.0.0.1:8080 down; # Placeholder server
%{ else }
%{ for target in target_group.targets }
    server ${target}:${target_group.port};
%{ endfor }
%{ endif }
}
EOF
%{ endfor }

# Create health check script
mkdir -p /usr/local/bin
cat <<EOF > /usr/local/bin/health-check.sh
#!/bin/bash

%{ for target_group_name, target_group in target_groups }
%{ if target_group.health_check != null }
echo "Checking ${target_group_name} targets..."
%{ for target in target_group.targets }
curl -s -o /dev/null -w "%{http_code}" http://${target}:${target_group.health_check.port != "" ? target_group.health_check.port : target_group.port}${target_group.health_check.path}
if [ \$? -eq 0 ]; then
  echo "${target} is healthy"
else
  echo "${target} is unhealthy"
fi
%{ endfor }
%{ endif }
%{ endfor }
EOF
chmod +x /usr/local/bin/health-check.sh

# Set up cron job to run health checks every minute
(crontab -l 2>/dev/null; echo "* * * * * /usr/local/bin/health-check.sh >> /var/log/health-check.log 2>&1") | crontab -

%{ if enable_https && ssl_certificate == "" && ssl_certificate_key == "" }
# Generate self-signed certificate if no certificate was provided
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout /etc/ssl/private/nginx-selfsigned.key \
  -out /etc/ssl/certs/nginx-selfsigned.crt \
  -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
%{ endif }

# Restart NGINX to apply new configuration
systemctl restart nginx

# Enable NGINX on boot
systemctl enable nginx

echo "NGINX load balancer installation completed at $(date)"
